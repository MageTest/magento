<?php
/**
 * Magento
 *
 * NOTICE OF LICENSE
 *
 * This source file is subject to the Open Software License (OSL 3.0)
 * that is bundled with this package in the file LICENSE.txt.
 * It is also available through the world-wide-web at this URL:
 * http://opensource.org/licenses/osl-3.0.php
 * If you did not receive a copy of the license and are unable to
 * obtain it through the world-wide-web, please send an email
 * to license@magentocommerce.com so we can send you a copy immediately.
 *
 * DISCLAIMER
 *
 * Do not edit or add to this file if you wish to upgrade Magento to newer
 * versions in the future. If you wish to customize Magento for your
 * needs please refer to http://www.magentocommerce.com for more information.
 *
 * @copyright   Copyright (c) 2014 X.commerce, Inc. (http://www.magentocommerce.com)
 * @license     http://opensource.org/licenses/osl-3.0.php  Open Software License (OSL 3.0)
 */
namespace Magento\SalesRule\Model\Resource\Rule;

/**
 * @magentoDataFixture Magento/SalesRule/_files/rules.php
 * @magentoDataFixture Magento/SalesRule/_files/coupons.php
 */
class CollectionTest extends \PHPUnit_Framework_TestCase
{
    /**
     * @dataProvider setValidationFilterDataProvider()
     * @param string $couponCode
     * @param array $expectedItems
     */
    public function testSetValidationFilter($couponCode, $expectedItems)
    {
        $this->_collection = \Magento\TestFramework\Helper\Bootstrap::getObjectManager()->create(
            'Magento\SalesRule\Model\Resource\Rule\Collection'
        );
        $items = array_values($this->_collection->setValidationFilter(1, 0, $couponCode)->getItems());

        $ids = array();
        foreach ($items as $key => $item) {
            $this->assertEquals($item->getName(), $expectedItems[$key]);
            if (in_array($item->getId(), $ids)) {
                $this->fail('Item should be unique in result collection');
            }
            $ids[] = $item->getId();
        }
    }

    public function setValidationFilterDataProvider()
    {
        return array(
            'Check type COUPON' => array('coupon_code', array('#1', '#2', '#5')),
            'Check type NO_COUPON' => array('', array('#2', '#5')),
            'Check type COUPON_AUTO' => array('coupon_code_auto', array('#2', '#4', '#5')),
            'Check result with auto generated coupon' => array('autogenerated_3_1', array('#2', '#3', '#5')),
            'Check result with non actual previously generated coupon' => array(
                'autogenerated_2_1',
                array('#2', '#5')
            ),
            'Check result with wrong code' => array('wrong_code', array('#2', '#5'))
        );
    }
}
